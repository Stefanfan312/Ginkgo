// Mocks generated by Mockito 5.4.5 from annotations
// in ginkgo_app/test/social/activity_detail_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ginkgo_app/app/models/activity.dart' as _i2;
import 'package:ginkgo_app/app/services/activity_service.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeActivity_0 extends _i1.SmartFake implements _i2.Activity {
  _FakeActivity_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ActivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityService extends _i1.Mock implements _i3.ActivityService {
  MockActivityService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Activity>> getPopularActivities() =>
      (super.noSuchMethod(
            Invocation.method(#getPopularActivities, []),
            returnValue: _i4.Future<List<_i2.Activity>>.value(<_i2.Activity>[]),
          )
          as _i4.Future<List<_i2.Activity>>);

  @override
  _i4.Future<_i2.Activity> getActivityDetail(String? activityId) =>
      (super.noSuchMethod(
            Invocation.method(#getActivityDetail, [activityId]),
            returnValue: _i4.Future<_i2.Activity>.value(
              _FakeActivity_0(
                this,
                Invocation.method(#getActivityDetail, [activityId]),
              ),
            ),
          )
          as _i4.Future<_i2.Activity>);

  @override
  _i4.Future<bool> joinActivity(String? activityId) =>
      (super.noSuchMethod(
            Invocation.method(#joinActivity, [activityId]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Activity>> getUserActivities(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserActivities, [userId]),
            returnValue: _i4.Future<List<_i2.Activity>>.value(<_i2.Activity>[]),
          )
          as _i4.Future<List<_i2.Activity>>);

  @override
  _i4.Future<bool> favoriteActivity(String? activityId, bool? isFavorite) =>
      (super.noSuchMethod(
            Invocation.method(#favoriteActivity, [activityId, isFavorite]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<List<_i2.Activity>> getFavoriteActivities(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getFavoriteActivities, [userId]),
            returnValue: _i4.Future<List<_i2.Activity>>.value(<_i2.Activity>[]),
          )
          as _i4.Future<List<_i2.Activity>>);
}
